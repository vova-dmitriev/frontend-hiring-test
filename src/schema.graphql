scalar MessagesCursor

enum MessageStatus {
  Sending
  Sent
  Read
}

enum MessageSender {
  Admin
  Customer
}

type Message {
  id: ID!
  text: String!
  status: MessageStatus!
  updatedAt: String!
  sender: MessageSender!
}

type MessageEdge {
  node: Message!
  cursor: MessagesCursor!
}

type MessagePageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: MessagesCursor
  endCursor: MessagesCursor
}

type MessagePage {
  edges: [MessageEdge!]!
  pageInfo: MessagePageInfo!
}

type Query {
  messages(
    first: Int
    after: MessagesCursor
    before: MessagesCursor
  ): MessagePage!
}

type Mutation {
  sendMessage(text: String!): Message!
}

type Subscription {
  messageAdded: Message!
  messageUpdated: Message!
}
